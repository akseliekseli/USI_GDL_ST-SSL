# -*- coding: utf-8 -*-
"""Spatio-Temporal Encoder.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xg5CLirl_17GUZiTWg69_9JLDy8yTKeR
"""

!pip3 install torch
!pip3 install torchvision
!pip3 install glu-tf #for the gated mechnaism - GLU

###imports

#import torch  ##2.0.0+cu118
import pandas as pd
import numpy as np
import tensorflow as tf

from glu_tf import GLU

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,  MaxPooling2D, Flatten , Activation, Lambda, Convolution1D
from tensorflow.keras.utils import to_categorical

"""DATASET"""

##find input size get from dataset
#input_size =

"""1-D causal convolution along the time dimension with a gated mechanism"""

x = tf.random.normal(input_size)
y = tf.keras.layers.Conv1D(32, 3, padding='causal', activation='relu', input_shape = input_size[1:])(x)
print(y.shape)

"""DEFINE THE MODEL"""

## testing
model = Sequential()
model.add(Convolution1D(filters=1, 
                 kernel_size=2, 
                 padding='causal', 
                 dilation_rate=1,
                 use_bias=False,
                 name='glu'
                 #batch_input_shape=(None,3,4 1)
                 ))
model.summary()

## split it into the spatial domain and temporal domain and
## train them with 2 different machinea learning model maybe
class STEncoder():

  def __init__(self):
    #gated mechanism
    super(STEncoder, self).__init__()

    ##decoder for changing the size of the output for computing the loss 
    #self.fc = torch.nn.Linear(FIn, FOut)


  def forward(self):
    return

###Temporal convolutional

## Specifically, our temporal convolution (TC) takes the traffic flow tensor as the
## input and outputs a time-aware embedding for each region
class TempConvLayer():


  def __init__(self):
    super(TempConvLayer, self).__init__()

  def forward(self):
    return